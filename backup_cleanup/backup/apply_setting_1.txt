    def apply_setting(self, option):
        # Apply the setting change
        global SCREEN_WIDTH, SCREEN_HEIGHT, SCALE_X, SCALE_Y, LANE_WIDTH, LANE_POSITIONS
        
        if option == "FULLSCREEN":
            if self.current_values[option] == 1:  # ON
                # Save current window size before going fullscreen
                self.windowed_size = (self.screen_width, self.screen_height)
                
                # Get the display info for proper fullscreen resolution
                info = pygame.display.Info()
                SCREEN_WIDTH = info.current_w
                SCREEN_HEIGHT = info.current_h
                
                # Set fullscreen mode
                self.screen = pygame.display.set_mode(
                    (SCREEN_WIDTH, SCREEN_HEIGHT), 
                    pygame.FULLSCREEN
                )
                
                # Update menu dimensions
                self.screen_width = SCREEN_WIDTH
                self.screen_height = SCREEN_HEIGHT
                
                # Update scale factors
                SCALE_X = SCREEN_WIDTH / BASE_WIDTH
                SCALE_Y = SCREEN_HEIGHT / BASE_HEIGHT
                
                # Recalculate lane positions
                LANE_WIDTH = SCREEN_WIDTH // 6
                LANE_POSITIONS = [LANE_WIDTH * i + LANE_WIDTH // 2 for i in range(6)]
                
                # Update fonts for new screen size
                self.font_large = pygame.font.SysFont(
                    "arial", int(self.screen_height * 0.06), bold=True
                )
                self.font_medium = pygame.font.SysFont(
                    "arial", int(self.screen_height * 0.04), bold=True
                )
                self.font_small = pygame.font.SysFont(
                    "arial", int(self.screen_height * 0.03)
                )
                
                print(f"Switched to fullscreen mode: {SCREEN_WIDTH}x{SCREEN_HEIGHT}")
                return "FULLSCREEN_CHANGED"
            else:  # OFF
                # Restore previous window size
                if hasattr(self, 'windowed_size'):
                    window_width, window_height = self.windowed_size
                else:
                    # Default size if no previous size is stored
                    window_width, window_height = 1280, 720
                
                # Update global variables
                SCREEN_WIDTH = window_width
                SCREEN_HEIGHT = window_height
                
                # Set windowed mode
                self.screen = pygame.display.set_mode(
                    (SCREEN_WIDTH, SCREEN_HEIGHT), 
                    pygame.RESIZABLE
                )
                
                # Update menu dimensions
                self.screen_width = SCREEN_WIDTH
                self.screen_height = SCREEN_HEIGHT
                
                # Update scale factors
                SCALE_X = SCREEN_WIDTH / BASE_WIDTH
                SCALE_Y = SCREEN_HEIGHT / BASE_HEIGHT
                
                # Recalculate lane positions
                LANE_WIDTH = SCREEN_WIDTH // 6
                LANE_POSITIONS = [LANE_WIDTH * i + LANE_WIDTH // 2 for i in range(6)]
                
                # Update fonts for new screen size
                self.font_large = pygame.font.SysFont(
                    "arial", int(self.screen_height * 0.06), bold=True
                )
                self.font_medium = pygame.font.SysFont(
                    "arial", int(self.screen_height * 0.04), bold=True
                )
                self.font_small = pygame.font.SysFont(
                    "arial", int(self.screen_height * 0.03)
                )
                
                print(f"Switched to windowed mode: {SCREEN_WIDTH}x{SCREEN_HEIGHT}")
                return "FULLSCREEN_CHANGED"
        elif option == "SOUND":
            # Toggle sound
            global sound_enabled
            sound_enabled = bool(self.current_values[option])
            print(f"Sound {'enabled' if sound_enabled else 'disabled'}")
            return None
        elif option == "MUSIC":
            # Toggle music
            global music_enabled
            music_enabled = bool(self.current_values[option])
            print(f"Music {'enabled' if music_enabled else 'disabled'}")
            return None

        # Other settings would be applied here
        print(f"Setting {option} changed to {self.settings[option][self.current_values[option]]}")
        return None
