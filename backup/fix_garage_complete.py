#!/usr/bin/env python3
import os

def fix_garage_complete():
    """Fix the garage menu implementation"""
    
    # Path to the game file
    file_path = "/mnt/c/Users/ARNAB/Desktop/AWS_Q_CLI/car_game_advanced_new.py"
    
    # Read the file content
    with open(file_path, 'r') as f:
        lines = f.readlines()
    
    # Find the Game class
    game_class_start = -1
    for i, line in enumerate(lines):
        if "class Game:" in line:
            game_class_start = i
            break
    
    if game_class_start == -1:
        print("Could not find Game class!")
        return
    
    # Find a good place to insert the garage menu method
    # Let's look for the show_game_mode_menu method
    game_mode_menu_start = -1
    for i in range(game_class_start, len(lines)):
        if "def show_game_mode_menu(self):" in lines[i]:
            game_mode_menu_start = i
            break
    
    if game_mode_menu_start == -1:
        print("Could not find show_game_mode_menu method!")
        return
    
    # Create the garage menu method with proper indentation
    garage_menu_code = [
        "    def show_garage_menu(self, background_surface):\n",
        "        \"\"\"Show the garage menu for car selection and customization\"\"\"\n",
        "        # Define colors\n",
        "        WHITE = (255, 255, 255)\n",
        "        BLACK = (0, 0, 0)\n",
        "        NEON_YELLOW = (255, 255, 0)\n",
        "        ELECTRIC_PURPLE = (191, 64, 191)\n",
        "        NEON_GREEN = (57, 255, 20)\n",
        "        SLEEK_SILVER = (204, 204, 204)\n",
        "        BRIGHT_RED = (255, 62, 65)\n",
        "        \n",
        "        # Get current screen dimensions\n",
        "        screen_width = self.screen.get_width()\n",
        "        screen_height = self.screen.get_height()\n",
        "        \n",
        "        # Create fonts\n",
        "        title_font = get_font(48, bold=True)\n",
        "        menu_font = get_font(36)\n",
        "        info_font = get_font(24)\n",
        "        \n",
        "        # Available cars with their stats\n",
        "        cars = [\n",
        "            {\n",
        "                \"name\": \"SPORTS CAR\",\n",
        "                \"image\": \"car.png\",  # Default car image\n",
        "                \"speed\": 8,\n",
        "                \"acceleration\": 9,\n",
        "                \"handling\": 7,\n",
        "                \"color\": (255, 0, 0),  # Red\n",
        "                \"description\": \"Fast and agile sports car with excellent acceleration.\"\n",
        "            },\n",
        "            {\n",
        "                \"name\": \"MUSCLE CAR\",\n",
        "                \"image\": \"car2.png\",  # Use existing car image or create a new one\n",
        "                \"speed\": 9,\n",
        "                \"acceleration\": 7,\n",
        "                \"handling\": 6,\n",
        "                \"color\": (0, 0, 255),  # Blue\n",
        "                \"description\": \"Powerful muscle car with high top speed.\"\n",
        "            },\n",
        "            {\n",
        "                \"name\": \"COMPACT CAR\",\n",
        "                \"image\": \"car3.png\",  # Use existing car image or create a new one\n",
        "                \"speed\": 6,\n",
        "                \"acceleration\": 6,\n",
        "                \"handling\": 9,\n",
        "                \"color\": (0, 255, 0),  # Green\n",
        "                \"description\": \"Nimble compact car with excellent handling.\"\n",
        "            }\n",
        "        ]\n",
        "        \n",
        "        # Current car index\n",
        "        current_car = 0\n",
        "        \n",
        "        # Load car images or create colored rectangles as placeholders\n",
        "        car_images = []\n",
        "        for car in cars:\n",
        "            try:\n",
        "                # Try to load the car image\n",
        "                img = pygame.image.load(car[\"image\"])\n",
        "                img = pygame.transform.scale(img, (200, 100))  # Scale to appropriate size\n",
        "                car_images.append(img)\n",
        "            except:\n",
        "                # Create a colored rectangle as placeholder\n",
        "                img = pygame.Surface((200, 100), pygame.SRCALPHA)\n",
        "                img.fill(car[\"color\"])\n",
        "                # Add some details to make it look like a car\n",
        "                pygame.draw.rect(img, (0, 0, 0), (0, 0, 200, 100), 2)  # Border\n",
        "                pygame.draw.rect(img, (0, 0, 0), (50, 20, 100, 40), 2)  # Windows\n",
        "                pygame.draw.circle(img, (0, 0, 0), (50, 80), 15)  # Wheel\n",
        "                pygame.draw.circle(img, (0, 0, 0), (150, 80), 15)  # Wheel\n",
        "                car_images.append(img)\n",
        "        \n",
        "        # Main garage menu loop\n",
        "        clock = pygame.time.Clock()\n",
        "        running = True\n",
        "        \n",
        "        while running:\n",
        "            # Handle events\n",
        "            for event in pygame.event.get():\n",
        "                if event.type == pygame.QUIT:\n",
        "                    pygame.quit()\n",
        "                    sys.exit()\n",
        "                    \n",
        "                if event.type == pygame.KEYDOWN:\n",
        "                    if event.key == pygame.K_ESCAPE:\n",
        "                        # Return to main menu\n",
        "                        return\n",
        "                    elif event.key == pygame.K_LEFT:\n",
        "                        # Previous car\n",
        "                        current_car = (current_car - 1) % len(cars)\n",
        "                        # Play selection sound\n",
        "                        if sound_enabled and hasattr(self, \"sound_menu_navigate\"):\n",
        "                            self.sound_menu_navigate.play()\n",
        "                    elif event.key == pygame.K_RIGHT:\n",
        "                        # Next car\n",
        "                        current_car = (current_car + 1) % len(cars)\n",
        "                        # Play selection sound\n",
        "                        if sound_enabled and hasattr(self, \"sound_menu_navigate\"):\n",
        "                            self.sound_menu_navigate.play()\n",
        "                    elif event.key == pygame.K_RETURN:\n",
        "                        # Select this car\n",
        "                        # Here you would set the player's car choice\n",
        "                        # For now, just play a sound and return\n",
        "                        if sound_enabled and hasattr(self, \"sound_menu_select\"):\n",
        "                            self.sound_menu_select.play()\n",
        "                        print(f\"Selected car: {cars[current_car]['name']}\")\n",
        "                        # Store the selected car\n",
        "                        self.selected_car = current_car\n",
        "                        return\n",
        "                \n",
        "                if event.type == pygame.MOUSEBUTTONDOWN:\n",
        "                    if event.button == 1:  # Left mouse button\n",
        "                        # Check if back button was clicked\n",
        "                        if back_button_rect.collidepoint(event.pos):\n",
        "                            # Play selection sound\n",
        "                            if sound_enabled and hasattr(self, \"sound_menu_select\"):\n",
        "                                self.sound_menu_select.play()\n",
        "                            return\n",
        "                        # Check if select button was clicked\n",
        "                        elif select_button_rect.collidepoint(event.pos):\n",
        "                            # Play selection sound\n",
        "                            if sound_enabled and hasattr(self, \"sound_menu_select\"):\n",
        "                                self.sound_menu_select.play()\n",
        "                            print(f\"Selected car: {cars[current_car]['name']}\")\n",
        "                            # Store the selected car\n",
        "                            self.selected_car = current_car\n",
        "                            return\n",
        "                        # Check if left arrow was clicked\n",
        "                        elif left_arrow_rect.collidepoint(event.pos):\n",
        "                            # Previous car\n",
        "                            current_car = (current_car - 1) % len(cars)\n",
        "                            # Play selection sound\n",
        "                            if sound_enabled and hasattr(self, \"sound_menu_navigate\"):\n",
        "                                self.sound_menu_navigate.play()\n",
        "                        # Check if right arrow was clicked\n",
        "                        elif right_arrow_rect.collidepoint(event.pos):\n",
        "                            # Next car\n",
        "                            current_car = (current_car + 1) % len(cars)\n",
        "                            # Play selection sound\n",
        "                            if sound_enabled and hasattr(self, \"sound_menu_navigate\"):\n",
        "                                self.sound_menu_navigate.play()\n",
        "            \n",
        "            # Draw background\n",
        "            self.screen.blit(background_surface, (0, 0))\n",
        "            \n",
        "            # Draw sparkles animation\n",
        "            self.update_sparkles(0.016)  # Use a fixed time step for consistent animation\n",
        "            self.draw_sparkles(self.screen)\n",
        "            \n",
        "            # Draw title\n",
        "            title_text = title_font.render(\"GARAGE\", True, NEON_YELLOW)\n",
        "            title_rect = title_text.get_rect(center=(screen_width // 2, screen_height // 6))\n",
        "            self.screen.blit(title_text, title_rect)\n",
        "            \n",
        "            # Draw car image\n",
        "            car_image_rect = car_images[current_car].get_rect(center=(screen_width // 2, screen_height // 2 - 50))\n",
        "            self.screen.blit(car_images[current_car], car_image_rect)\n",
        "            \n",
        "            # Draw car name\n",
        "            car_name_text = menu_font.render(cars[current_car][\"name\"], True, ELECTRIC_PURPLE)\n",
        "            car_name_rect = car_name_text.get_rect(center=(screen_width // 2, screen_height // 2 + 50))\n",
        "            self.screen.blit(car_name_text, car_name_rect)\n",
        "            \n",
        "            # Draw car stats\n",
        "            stats_y = screen_height // 2 + 100\n",
        "            stats_spacing = 30\n",
        "            \n",
        "            # Speed stat\n",
        "            speed_text = info_font.render(f\"Speed: {cars[current_car]['speed']}/10\", True, WHITE)\n",
        "            speed_rect = speed_text.get_rect(center=(screen_width // 2, stats_y))\n",
        "            self.screen.blit(speed_text, speed_rect)\n",
        "            \n",
        "            # Acceleration stat\n",
        "            accel_text = info_font.render(f\"Acceleration: {cars[current_car]['acceleration']}/10\", True, WHITE)\n",
        "            accel_rect = accel_text.get_rect(center=(screen_width // 2, stats_y + stats_spacing))\n",
        "            self.screen.blit(accel_text, accel_rect)\n",
        "            \n",
        "            # Handling stat\n",
        "            handling_text = info_font.render(f\"Handling: {cars[current_car]['handling']}/10\", True, WHITE)\n",
        "            handling_rect = handling_text.get_rect(center=(screen_width // 2, stats_y + 2 * stats_spacing))\n",
        "            self.screen.blit(handling_text, handling_rect)\n",
        "            \n",
        "            # Draw car description\n",
        "            desc_text = info_font.render(cars[current_car][\"description\"], True, SLEEK_SILVER)\n",
        "            desc_rect = desc_text.get_rect(center=(screen_width // 2, stats_y + 3 * stats_spacing))\n",
        "            self.screen.blit(desc_text, desc_rect)\n",
        "            \n",
        "            # Draw navigation arrows\n",
        "            arrow_y = screen_height // 2 - 50\n",
        "            \n",
        "            # Left arrow\n",
        "            left_arrow_text = menu_font.render(\"<\", True, NEON_GREEN)\n",
        "            left_arrow_rect = left_arrow_text.get_rect(center=(screen_width // 4, arrow_y))\n",
        "            self.screen.blit(left_arrow_text, left_arrow_rect)\n",
        "            \n",
        "            # Right arrow\n",
        "            right_arrow_text = menu_font.render(\">\", True, NEON_GREEN)\n",
        "            right_arrow_rect = right_arrow_text.get_rect(center=(3 * screen_width // 4, arrow_y))\n",
        "            self.screen.blit(right_arrow_text, right_arrow_rect)\n",
        "            \n",
        "            # Draw buttons\n",
        "            button_y = screen_height - 100\n",
        "            \n",
        "            # Back button\n",
        "            back_text = menu_font.render(\"BACK\", True, BRIGHT_RED)\n",
        "            back_button_rect = back_text.get_rect(center=(screen_width // 4, button_y))\n",
        "            self.screen.blit(back_text, back_button_rect)\n",
        "            \n",
        "            # Select button\n",
        "            select_text = menu_font.render(\"SELECT\", True, NEON_GREEN)\n",
        "            select_button_rect = select_text.get_rect(center=(3 * screen_width // 4, button_y))\n",
        "            self.screen.blit(select_text, select_button_rect)\n",
        "            \n",
        "            # Draw car selection indicators\n",
        "            indicator_y = screen_height - 50\n",
        "            for i in range(len(cars)):\n",
        "                if i == current_car:\n",
        "                    # Current car indicator\n",
        "                    pygame.draw.circle(self.screen, NEON_YELLOW, \n",
        "                                      (screen_width // 2 - (len(cars) - 1) * 15 + i * 30, indicator_y), 8)\n",
        "                else:\n",
        "                    # Other car indicator\n",
        "                    pygame.draw.circle(self.screen, SLEEK_SILVER, \n",
        "                                      (screen_width // 2 - (len(cars) - 1) * 15 + i * 30, indicator_y), 5)\n",
        "            \n",
        "            # Update display\n",
        "            pygame.display.flip()\n",
        "            clock.tick(60)\n",
        "\n"
    ]
    
    # Insert the garage menu method before the game mode menu method
    lines[game_mode_menu_start:game_mode_menu_start] = garage_menu_code
    
    # Write the updated content back to the file
    with open(file_path, 'w') as f:
        f.writelines(lines)
    
    print("Garage menu implementation fixed successfully!")

if __name__ == "__main__":
    fix_garage_complete()
